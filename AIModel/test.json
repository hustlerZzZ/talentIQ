{
  "description": "Implement Djikstra's Algorithim",
  "test_cases": "Here is the description:\n\n**Dijkstra's Algorithm**\n\nGiven a weighted graph, implement Dijkstra's algorithm to find the shortest path from a source node to all other nodes in the graph. The algorithm should return the minimum distance from the source node to each node, as well as the previous node in the shortest path.\n\n**Test Cases**\n\nHere are 5 test cases for your implementation:\n\n**Test Case 1: Simple Graph**\n\n* Graph: {A: {}, B: {A: 2}, C: {A: 3, B: 1}}\n* Source Node: A\n* Expected Output: {A: 0, B: 2, C: 3}\n\n**Test Case 2: Graph with Negative Weight Edge**\n\n* Graph: {A: {}, B: {A: 2}, C: {A: 3, B: -1}}\n* Source Node: A\n* Expected Output: {A: 0, B: 1, C: 2}\n\n**Test Case 3: Graph with Multiple Shortest Paths**\n\n* Graph: {A: {}, B: {A: 2}, C: {A: 3, B: 1, D: 2}}\n* Source Node: A\n* Expected Output: {A: 0, B: 2, C: 2, D: 4}\n\n**Test Case 4: Graph with No Edges**\n\n* Graph: {A: {}, B: {}, C: {}}\n* Source Node: A\n* Expected Output: {A: 0, B: Infinity, C: Infinity}\n\n**Test Case 5: Graph with Self-Loop**\n\n* Graph: {A: {A: 1}, B: {A: 2}, C: {A: 3, B: 1}}\n* Source Node: A\n* Expected Output: {A: 0, B: 2, C: 3}\n\nNote: The expected output is in JSON format, where each key is a node and the value is the minimum distance from the source node to that node."
}